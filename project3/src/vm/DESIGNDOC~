       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Henry Lau <henrylau@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

enum page_type {S, F, Z};

These enumeration are for the different virtual page types (swap, file, and zero respectivly)

struct page
{
	enum page_type type;		// holds the enumeration as it declares the page type
	uint32_t *dir;			// holds the pagedir
	bool load;			// bool value to let us know if there is something loaded or not
	bool write;			// lets us know the if the page is able to be written on
	void * f_addr;			// virtual address of the page
	void * kpage;			// physical address of the page
	struct list_elem elem;		// the list element of the frame shared page list
	size_t swap_index;		// block index for swapping

	size_t read;			// read bytes for the page's file
	size_t zero;			// zero bytes for the page's file
	off_t offset;			// offset of the page's file
	struct file *f;			// file struct for the page
};

static struct lock lock_list;		// lock_list for synchronization
static struct lock load;		// ensures that loading is synchronized

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Given a user virual address of the page, I check to see if the page is
in the thread's pagedir. If it is not, then I would obtain a new one.
If it exist, then I obtain the phyiscal address of the frame and find
it in the hash table. 

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

I only accessed the user virtual addresses to obtain the user data
so everything will be updated automatically on the kernel.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

To avoid race conditions I used a lock when there is a new frame being
obtained. This happanes when we are loading a page. When a new frame is
obtained then we would acquire the lock and process everything, then
release the lock.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

The data stucture I used was a hash table for all the pages to represent
the virtual-to-physical mapping as it is simple with adding and looking up.
The hash table always accessable to for memory. This keeps the data of the
virtual page in a way that it is easy to access.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct frame
{
	struct page *p;			// holds the page for each frame
	struct hash_elem h_elem;	// hash elment fo the hash table of frames
	bool pin;			// allows us to know if the frame is pinned or not
	void * f_addr;			// the address of the frame
	void * fp_addr;			// physical address of the frame
	uint32_t *dir;			// holds the pagedir
};

static struct hash frames;		// the hash table of frames
static struct lock f_lock;		// the frame lock
static struct lock e_lock;		// the eviction lock

static struct lock lock;		// the lock for swapping
static struct bitmap *map;		// map for swapping

static struct block *block;		// the block for the swap table

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

When a frame needs to be evicted, I would iterate throught the hash
table with the list of frame that I kept track with the oldest and
newest. Once I find a frame that is not in use iterating through the
frame list and the hash table, then we would just take it out and
adjust the pointer.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

I would obtain the frame the the process Q had and I would clear the
mapping of pagedir. Once that is done, it can start unloading the content
of each page if the file is not a read-only file. Then move into removing
the frame from the hash table. Now I can process with obtaining back the
memory for the process P to load its pages onto that frame.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We did not need to work on extending the stack but if I did need to extended
then I would check to see if the address is in the user space and if the
that space is less than 32 bytes. If these checks are not passed, then there
would need to be an extension of the stack into the space where the page is
faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

The basic of my VM synchronization design is that I had a lock for
frame evictions, and page loading which would make sure that these
two threads would not access a section concurrently. The lock for
the frame would make sure that there would not be any way for inserting
and removing from the hash table at the same time. A condition for deadlocks
is a circular lock chain which is something that I avoided during
implementation. If there is ever 2 locks being acquired we would finish
the most recent lock obtained and then go back to the lock that we acquired
before and finish that.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Just as explained in B3, as P is evicting Q's frame it is okay for that
process to access the frame until the mapping is totally cleared from the
pagedir. Once it is cleared, the Q wont be able to access any of the pages.
So the page fault would have it access and empty frame. The eviction lock
is used to ensure that P finishes the eviction before Q is able to start.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

For a page fault, it would be needed to load into memory. As loading
is started, a new frame would be obtained and pinned. This frame will
be unpinned when the process is finished loading or if there is any
failure. When any frame is pinned, the eviction funtion will just ignore
it so Q would not be able to evict the frame.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

Page fault would require disk access os read_syscall and write_syscall
would handle the buffer one at a time where those syscall would find
a virtual page or increase the stack. If there is no virtual page to
find or unable to increase the stack, there that means it is invalid
access so the process would terminate. With valid access, the page will
load into main memory and pin the frame. The frame will unpin once
it is done being read or written on. Loading the page one at a time
re-ensures that the process is not overwhelmed with reading large
amounts of data at a time and pinning all the frames.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

In my design, I used multiple locks so there could be high parrallelism
but I carefully made sure that there would not be any of the four deadlock
situations. All the locks that I used were internal. So the locks are useful
in all the critial sections like frame eviction and page loading/unloading.
There are also locks to make sure that there is no inserting and removing
from the hash table at the same time.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

This whole assignment was very differcult and very long. Even though we didn't
have to do some of the parts. I will still unable to figure out the majority of
this assignment.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Working on this assignment really helped with understanding virutal memory.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I feel like there needs to be more hints on how to appoarch all the test case.
I tried to work backwards and appoarch this assignment with trying to understand
what each test case is looking for and coding from there but it was still
difficult.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
