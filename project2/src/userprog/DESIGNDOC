		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Henry Lau <henrylau@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

char *arg_loc[32];	- vector of arguments
char *arg;		- the argument
char *ptr;		- pointer to the next argument
int count = 0;		- counter for the argument
int arg_length;		- length of the argument

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

For argument parsing, I copied the file name into a local variable
and then processed with tokenizing the arguments into a stack which
would be in reverse order to what it orginally was. From here I could
scan the stack address of each argument and push it onto the stack.
I rensured the order of the stack as I have kept it in reverse order
so as they are accessed it is in the correct order.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() has three arguments. The third is which detemines the 
place within in the string to search. The state in where to search
is offered by the user and so it is multi-threaded safe as there
is a position argument.

strtok() is uaually used as a static pointer to store the position
of the string. Since, it is static, this means that race conditions
would be a problem, therefore it is not wise to use with threads.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The first advantage is that the Unix approach is simplier and safer
to use a shell-based parsing operations because the shell can help
check to see if there is any unsafe commands before going to the
kernal. The second advantage is that, since there is a separation
between arguments and executables, it allows complex semantatics
like pipelining and redirection.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#ifdef USERPROG
    uint32_t *pagedir;		- the page directory
    struct list list_child;	- list of children for the thread
    struct thread *parent;	- the parent thread
    struct file *file;		- the file for this thread
    int s_exit;			- status for the function exit()
    bool create_child;		- allows parent to know child has be created
#endif

struct child_thread		- used to keep track of the threads by the parent
  {
    tid_t tid;			- thread id
    struct thread *ref;		- thread reference
    struct list_elem elem;	- list_elem for the thread
    struct semaphore s;		- semaphore for the thread
    int s_exit;			- status for the function exit();
  };
  
static struct lock file_lock;	- lock to used by the syscalls to ensure one thread access the file system.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

I created a struct entry that contained a file descriptor, a file,
a thread, and an element where the thread owns the file and the
element within the file list.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

The syscall_handler, takes the esp pointer to determine which system
call is being requested, as there is an array of typedef (*call)
syscall that is initialized by syscall_init. The sys_read reads the
amout of data into the buffer, where then it acquires a lock on
the file and test the source of the system call where the data is
handled as STDIN or STDOUT. As next there is a check to see if the
buffer location is accessable for the user. Then we move into reading
the file if everything is sucessful.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The current approach is that if there is a full page of data to copy,
then the greatest number of times would be 2 and the least would be
1 time. The function pagedir_get_page is used to check the page, so when
the data spans to 2 pages there will be 2 calls to the funtion. For 
copying 2 bytes of data, the number of intersection depends on the number
of pages that it spans to. But checking 2 pages has a far lower probablity.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

At first it would take the thread and the thread id that it is accessing.
Then it will check to see if the user address exist or not and if it does
not then the program will exit or if it does exist, then it will access
the eax pointer and input the output of process_wait from the thread id.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

At first, there is a check to see if the user memory access is valid or
not where we would use is_user_vaddr to accessing the given pointer.
The esp pointer and three argument pointers will be checked and if any
of those are invalid then it will then exit. The buffer end pointer and
begin pointer are checked before they are used. When errors pop up, it
will then exit the move into process exit for a user process. An example
of the use for this would be found in the system write as there are few
layers to shield out errors.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

To ensure this, there was bool that was created to help ensure the parent
of the child. The variable is create_child that allowed the parents to 
know the the child has be created can be accessed. If not, then it will
be handled accordingly. There is also an instance were a lock is used to
ensure if it is success/failure that the child will get the parent's thread.
Before the parent creates the child thread, the parent will set up
the create_child to 0, which is initial actions that nothing has happened yet.
When the thread is created, then the parent we acquires the lock and wait
for the create_child to be not 0.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

To ensure that we had a status for the child thread and a semaphore that
would help with race conditions. The status represents the child's progress.
So P will call wait before C exits, therefore P will axquire the semaphore
and wait until until exit by checking the status of the child thread. For
P call wait after C exits, P will acquire the semaphore and find out that C
has already exit so it will access the status directly. For P termintes
without waiting for C to exit, the list in P will be free and the lock will
be released. Conditions will not need to be signaled because no one is waiting
for a signal. When C finds out the parent exit, the it will continue executing.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

I wanted to make sure that I did not access spaces that was not userspace
so there was a check at first to see if the memory is within the
userspace and if not then there will be an exit from the system (exit(-)).
This was to protect the kernal from any odd factors in where it will 
panic.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

An advantage is that there will be easy access to all the files that the
process currently owns. Then there is a use of a list of files to make 
sure it maps the open files to parent threads. Given the file descriptor,
it will be easy to find which threads are using the files. So we are able
to check the thread id asscociated with each file.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

There was no need to change it as the default current tid_t to pid_t 
mapping given by Pintos was reasonable.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

The system call was very difficult as there still are a few errors in
the current code that I have. It took a very long time to figure out, where
I am still not finished.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Working on this whole project gave me a huge understanding on an OS design.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think some clues on how to appoarch ever test case would be nice.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

More office hours would be better because many of the office hours overlap
with my class and work schedule.

>> Any other comments?

More time on the assignments would be greatly apprciated!!
