			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Henry Lau <henrylau@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- For timer.c, I added a global variable of "static struct list sleep_queue"
	and this global variable holds a list of all the threads that are sleeping.

- For thread.h, I added a variable to the struct thread of "int64_t timer" and
	this variable keeps track of the ticks in which the thread is done sleeping
	and ready to be unblocked.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

- In timer_sleep(), we check to see if the number of ticks is valid, if not then
	it will just return to were timer_sleep() was called. If the number of ticks
	is valid, then we store a temp value where it starts so we can calculate the
	number of ticks for the thread. Then, place the current thread to the 
	sleep_queue, in which next the thread will be blocked. The timer interrupt
	handler would take the first thread off the sleep_queue and check the timer
	with the global ticks. If the timer is less than or equal to the global number
	of ticks, then it would be removed from the sleep_queue and become unblocked.
	This timer interrupt process would repeat until the sleep_queue is empty or
	when it reaches a thread that has a timer value greater than the global ticks

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

- To minimize the amount of time spent in the timer interrupt handler, the 
	sleep_queue is kept in sorted order so the handler does not have to iterate
	through the whole list for every interrupt.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

- Race conditions are avoided because the interrupts are disabled before
	accessing anything in the sleep_queue.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

- Race conditions are avoided because the interrupts are disabled before
	timer_sleep() is called. The only time an interrupt is called inside
	timer_sleep() is right after the current timer_ticks() is loaded.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

- I choose this design because looking at the bigger picture, I saw that
	there would be issues with the number of time spent in the interrupt
	if it wasn't sorted. Though now we spend more time placing the threads
	in order but we don't need to iterated through the whole list as the
	timer interrupt handlers are in action.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- In thread.h, I had added "int initial_priority", "struct lock *wait",
	"struct list list_locks", and "struct list_elem donating_elem" into
	the struct thread. "int initial_priority" holds the initial prioirity
	of the thread. "struct lock *wait" is the lock that the thread is
	waiting on and if there is not lock, then it would hold the value of
	NULL. "struct list list_locks" is the list of threads that are waiting
	on locks. "struct list_elem donating_elem" is the list element that can
	be added to another thread's list_locks.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

- L1, L2, L3 are locks and T1, T2, T3, T4 are threads
	
	L2		 L3
T2 ----> T3 ----> T4
	L1
T1 ---->

	For the ASCCII art above, T4 would have a list_locks of T3, and
	T3 would have a list_locks of T2, and T1. T3 has to wait on the L3
	lock and T4 has to wait on no locks (NULL). T3 has a current lock
	priority of T1, T2, T3 and T4 has a current lock priority of T4
	and T3.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

- To ensure that the highest prioirty thread waiting for a semaphore, there
	is a list of waiters that show the threads waiting for the semaphore to
	be moved up. The waiters are placed in the list with the highest priority
	thread at the front.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

- When lock_aquired is called, the current thread is updated with the new
	lock the current lock and then the current thread would be added to 
	the lock holder list_locks. The prioirty is given iteratively as there
	is a while look for when a lock exist. while the lock exist, we check to
	see if there is a holder for the lock and if there is none or if the holder
	has a larger or equal priority to the thread's prioirty, then it will
	just return to where it was called. if there is a holder that is not larger,
	then we set the lock holder equal to the thread's priority and then update
	the thread to be the lock holder. Last but not least, we update the lock
	to the thread.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

- In lock_release(), the lock holder is updated to NULL, and removes the thread
	off the current thread's list_locks. Since the lock is released, then the 
	priority is also gone therefore all the priorities need to be updated. The
	highest priority thread that is locked is now placed on the ready queue.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

- In thread_set_priority(), a potential race condition could happen when the
	thread's priority is being updated to the current priority. In my
	implmentation, as we are updating the prioirty when the list_locks is empty.
	The timer interrupt handler is turned off because there is reading or writing 
	in the current thread's priority. From this, locks cannot be used since the 
	timer interrupt handler can not obtain locks.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

- This designed made it easier to use a list implementation. In other designs,
	threads would have to have a list of locks/semaphores which would be
	inefficent since in refreshing the priority, more time would be wasted
	looking for the next highest priority, since sorting the list of locks
	would take longer than a list implemantion of sorted prioirty of waiting
	threads.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

- I felt like this assignement was pretty difficult to me as I haven't
	been super comfortable with the C language. Also, with a 2 week deadline,
	it was difficult as we had to read all the documentation and understand
	the given code. I feel like I spend a lof of my time reading documenation
	and trying to understand the given code. This assignment too a long time
	as I am still unable to find my error for the alarm clock. I had the alarm
	clock working and then changed some code and it started to not work for
	the first three cases.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

- I felt like working on the priority schedule help me understand a lot
	the aspect of OS design. There needs to be a prioirty hierachy in which
	which thread is more important and should be finished before starting 
	the lower priorities.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

- I feel like a few hints could be letting students know that they can work
	backwards to understand what the test will be doing on their code and
	from that they can code according the the test cases.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

- I feel like more office hours would be better as a lot of the current office
	hours conflit with my class schedule or work.

>> Any other comments?

- More time on the next projects would be greatly appreciated!s